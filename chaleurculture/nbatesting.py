from nba_api.stats.endpoints import commonplayerinfo,commonteamroster,leaguedashplayerstats
import urllib
from bs4 import BeautifulSoup
import html5lib
import requests
import time
import decimal

#api endpoint deprecated and req returns empty html because it is generated by angular async after load

miami_heat_team_id=1610612748



def get_roster_stats():
  try:
    roster= commonteamroster.CommonTeamRoster(season='2018-19',team_id=miami_heat_team_id)
    roster_stats=roster.get_dict()
    return processnbadict(roster_stats['resultSets'][0]) #array []
  except Exception as e:
    return str(e)
def get_advanced_stats():
  try:
      advanced_stats=leaguedashplayerstats.LeagueDashPlayerStats(
      team_id_nullable=miami_heat_team_id,
      last_n_games=0,
      measure_type_detailed_defense='Advanced',
      month=0,
      opponent_team_id=0,
      pace_adjust='N',
      per_mode_detailed='PerGame',
      period=0,
      plus_minus='Y',
      rank='Y',
      season='2018-19',
      season_type_all_star='Regular Season',




      )
      advanced_stats=advanced_stats.get_dict()
      return processnbadict(advanced_stats['resultSets'][0]) #array []
  except Exception as e:
    return str(e)


def get_regular_stats():
  try:
    regular_stats=leaguedashplayerstats.LeagueDashPlayerStats(
    team_id_nullable=miami_heat_team_id,
    last_n_games=0,
    measure_type_detailed_defense='Base',
    month=0,
    opponent_team_id=0,
    pace_adjust='N',
    per_mode_detailed='PerGame',
    period=0,
    plus_minus='N',
    rank='N',
    season='2018-19',
    season_type_all_star='Regular Season',
              



    )
    regular_dict=regular_stats.get_dict()
    print(regular_dict['resultSets'][0])
    return processnbadict(regular_dict['resultSets'][0]) # array []
  except Exception as e:
    return str(e)   
def get_defense_stats():

  try:
    defensestats=leaguedashplayerstats.LeagueDashPlayerStats(
    team_id_nullable=miami_heat_team_id,
    last_n_games=0,
    measure_type_detailed_defense='Defense',
    month=0,
    opponent_team_id=0,
    pace_adjust='N',
    per_mode_detailed='PerGame',
    period=0,
    plus_minus='N',
    rank='N',
    season='2018-19',
    season_type_all_star='Regular Season',
  
    )
    defensedict=defensestats.get_dict()
    return processnbadict(defensedict['resultSets'][0])
  except Exception as e:
    return str(e)

#print(regular_stats.get_dict())
#/home/khalil/django2019projects/nabelk240/chaleurculture/htmlhustle/NBA.com_Stats _ Players Hustle.html
def parse_hustle_stats_page(page_path):
  f=open(page_path)

  soup = BeautifulSoup(f.read())
  f.close()
  #print(soup)

  souptable = soup.select(".nba-stat-table__overflow")
  name_box = soup.find("div", class_="nba-stat-table")
  counter=0
  #print(len(name_box.find_all("tr")[1:-1]))
  #div appears twice
  index=(len(name_box.find_all("tr")[1:-1])//2)
  #print(index)
  hustle_stats_cats=[
  ]
  hustle_stats=[]
  for row in name_box.find_all("tr")[0:1]:
      cells = row.find_all("th")
      for cell in cells:
          cell
          hustle_stats_cats.append(cell['data-field'])
  hustle_stats_cats.append('PLAYER_ID')
  #print(hustle_stats_cats)

  for row in name_box.find_all("tr")[1:index+1]:  # skipping header row
      cells = row.find_all("td")
      print (len(cells))
      player={}
      for counter, cell in enumerate(cells):
          if (counter ==0):
            link=cell.find("a")
            link=link['href'].split('/player/')[1].split("/")
            player_id= link[0]
            player['PLAYER_ID']=player_id
            
          

          
          player[hustle_stats_cats[counter]]=cell.string 
          
          #print(player)
      hustle_stats.append(player)
  return hustle_stats

        
        

#print(name_box)

#print(roster.common_team_roster.get_dict())
def heightcalc(height):
  splitheight=height.split("-")
  print(splitheight)
  heightininches=((int(splitheight[0])*12)+int(splitheight[1]))
  return heightininches
def AbsolutePercentageOff(ratio):
    if ratio<1:
      return 1-ratio
    else:
      return ratio - 1
def weightcalc(heightininches,weight):
  	# G. J. Hamwi  Formula for ideal weight for males: 48.0 kg + 2.7 kg per inch over 5 feet 
  weight=int(weight)
  print(weight)

  print(106+((heightininches-60)*6))
  if heightininches<60:
    targetweight=106
    value=weight/targetweight
    return {'pctoff':decimal.Decimal(AbsolutePercentageOff(value)),'targetweight':targetweight}
  else:
    targetweight=(106+((heightininches-60)*6))
    value= weight/targetweight
    
    return {'pctoff': decimal.Decimal(AbsolutePercentageOff(value)),'targetweight':targetweight}

heightininches=heightcalc("6-8")
final= weightcalc(heightininches,"240")
print(final)
def processnbadict(resultSets):
    allPlayers=[]
    headers=resultSets['headers']
    for row in resultSets['rowSet']:  # skipping header row
        player={}
        for counter, cell in enumerate(row):
            #print(cell)
            #print(headers[counter])
            #print(counter) #only works if no duplicate elements
            player[headers[counter]]=cell
            #print(player)
        allPlayers.append(player)   
    return allPlayers


